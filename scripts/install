#!/usr/bin/env bash

# Copyright (c) 2023 Purple Clay
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# in the Software without restriction, including without limitation the rights
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Install script is heavily based on: https://github.com/Masterminds/glide.sh/blob/master/get

: ${USE_SUDO:="true"}
: ${NSV_INSTALL_DIR:="/usr/local/bin"}

HAS_CURL="$(type "curl" &> /dev/null && echo true || echo false)"
HAS_WGET="$(type "wget" &> /dev/null && echo true || echo false)"

initArch() {
  ARCH=$(uname -m)
  case $ARCH in
    armv5*) ARCH="armv7";;
    armv6*) ARCH="armv7";;
    armv7*) ARCH="armv7";;
    aarch64) ARCH="arm64";;
    x86) ARCH="i386";;
    x86_64) ARCH="x86_64";;
  esac
}

initOS() {
  OS=$(echo `uname`|tr '[:upper:]' '[:lower:]')

  case "$OS" in
    # Minimalist GNU for Windows
    mingw*) OS='windows';;
	  msys*) OS='windows';;
  esac
}

canDownload() {
    local supported="darwin-arm64\ndarwin-x86_64\nlinux-armv7\nlinux-arm64\nlinux-x86_64"
    if ! echo "${supported}" | grep -q "${OS}-${ARCH}"; then
      echo "No prebuilt binary currently exists for ${OS}-${ARCH}."
      exit 1
    fi

    if [ "${HAS_CURL}" != "true" ] && [ "${HAS_WGET}" != "true" ]; then
      echo "Either curl or wget is required to download binary. Please install and try again"
      exit 1
    fi
}

download() {
  if [ -z "$DESIRED_VERSION" ]; then
    if [ "${HAS_CURL}" == "true" ]; then
      TAG="v$(curl -s https://api.github.com/repos/purpleclay/nsv/releases/latest | grep "tag_name" | cut -d'v' -f2 | cut -d'"' -f1)"
    elif [ "${HAS_WGET}" == "true" ]; then
      TAG="v$(wget -q https://api.github.com/repos/purpleclay/nsv/releases/latest -O - 2>&1 | grep "tag_name" | cut -d'v' -f2 | cut -d'"' -f1)"
    fi
  else
    TAG=${DESIRED_VERSION}
  fi

  echo "Attempting to download nsv ${TAG}..."

  PACKAGE_TYPE="tar.gz"
  if [ "${OS}" == "windows" ]; then
    PACKAGE_TYPE="zip"
  fi

  local archive="nsv_${TAG#v}_${OS}_${ARCH}.${PACKAGE_TYPE}"

  DOWNLOAD_URL="https://github.com/purpleclay/nsv/releases/download/${TAG}/${archive}"
  DOWNLOAD_DIR="$(mktemp -dt nsv-install-XXXXXXX)"
  NSV_FILE="${DOWNLOAD_DIR}/${archive}"

  if [ "${HAS_CURL}" == "true" ]; then
    curl -L "$DOWNLOAD_URL" -o "$NSV_FILE"
  elif [ "${HAS_WGET}" == "true" ]; then
    wget -q -O "$NSV_FILE" "$DOWNLOAD_URL"
  fi
}

install() {
  echo "Installing nsv..."

  local extract_dir="$DOWNLOAD_DIR/nsv-$TAG"
  mkdir -p $extract_dir
  tar xf "$NSV_FILE" -C "${extract_dir}"
  runAsRoot cp "${extract_dir}/nsv" "${NSV_INSTALL_DIR}/nsv"

  echo "Installed nsv to ${NSV_INSTALL_DIR}"
}

runAsRoot() {
  if [ $EUID -ne 0 -a "$USE_SUDO" = "true" ]; then
    sudo "${@}"
  else
    "${@}"
  fi
}

tidy() {

  if [[ -d "${DOWNLOAD_DIR:-}" ]]; then
    rm -rf "$DOWNLOAD_DIR"
  fi
}

verify() {
  set +e
  NSV="$(command -v nsv)"
  if [ "$?" = "1" ]; then
    echo "nsv not found. Is ${NSV_INSTALL_DIR} on your "'$PATH?'
    exit 1
  fi

  # Test version
  INSTALLED_VERSION="$(nsv version --short)"
  if [ "${INSTALLED_VERSION}" != "${TAG}" ]; then
    echo "Found version ${INSTALLED_VERSION} of nsv and not expected installed version of $TAG"
    exit 1
  fi
  set -e
}

bye() {
  local result=$?
	if [ "$result" != "0" ]; then
		echo "Failed to install nsv"
	fi
  tidy
	exit $result
}

help () {
  echo "nsv install"
  echo
  echo "Flags:"
  echo -e "  -h, --help     print help for the installer"
  echo -e "  -v, --version  download and install a specific version (default 'latest')"
  echo -e "      --no-sudo  install without using sudo"
}

trap "bye" EXIT
set -e

# Parsing input arguments (if any)
export INPUT_ARGUMENTS="${@}"
set -u
while [[ $# -gt 0 ]]; do
  case $1 in
    '--version'|-v)
       shift
       if [[ $# -ne 0 ]]; then
           export DESIRED_VERSION="${1}"
       else
           echo -e "Please provide a valid version: e.g. --version v0.1.0 or -v v0.1.0"
           exit 0
       fi
       ;;
    '--no-sudo')
       USE_SUDO="false"
       ;;
    '--help'|-h)
       help
       exit 0
       ;;
    *) exit 1
       ;;
  esac
  shift
done
set +u

initArch
initOS
canDownload
download
install
verify
tidy
