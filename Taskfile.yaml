version: "3"

vars:
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GIT_SHA:
    sh: git rev-parse --short HEAD
  GIT_BRANCH:
    sh: git branch --show-current
  LDFLAGS: >-
    -X main.version=dev-{{.GIT_SHA}}
    -X main.gitCommit={{.GIT_COMMIT}}
    -X main.gitBranch={{.GIT_BRANCH}}
    -X main.buildDate={{now | date "2006-01-02T15:04:05Z07:00"}}
  GOLANG_DAGGER: "github.com/purpleclay/daggerverse/golang@v0.3.0"

tasks:
  default:
    desc: Runs all of the default tasks
    cmds:
      - task: ci

  ci:
    desc: Run all CI tasks
    cmds:
      - task: deps
      - task: unit-test
      - task: lint
      - task: build

  deps:
    desc: Install all dependencies
    cmds:
      - go mod tidy

  unit-test:
    desc: Run the unit tests
    vars:
      TEST_FORMAT: '{{default "" .TEST_FORMAT}}'
      COVER_PROFILE: '{{default "coverage.out" .COVER_PROFILE}}'
      TEST_OPTIONS: '{{default "-short -race -vet=off -shuffle=on" .TEST_OPTIONS}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -covermode=atomic -coverprofile={{.COVER_PROFILE}} {{.TEST_FORMAT}} ./...

  golden-test:
    desc: Generate golden files
    cmds:
      - go test ./internal/tui/... -update

  lint:
    desc: Lint the code using golangci-lint
    vars:
      REPORT_FORMAT: '{{default "colored-line-number" .REPORT_FORMAT}}'
    cmds:
      - dagger call -m {{.GOLANG_DAGGER}} --src . lint --format {{.REPORT_FORMAT}}

  build:
    desc: Build the binary
    cmds:
      - go build -ldflags '-s -w {{.LDFLAGS}}' .

  format:
    desc: Format the code using gofumpt
    cmds:
      - dagger call -m {{.GOLANG_DAGGER}} --src . format export --path .

  bench:
    desc: Run the benchmarks
    vars:
      TEST_OPTIONS: '{{default "-bench=. -benchtime 5s -benchmem" .TEST_OPTIONS}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -run=^# ./...
